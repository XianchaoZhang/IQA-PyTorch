<!--
## Contribution Instructions
 -->
## 贡献说明

<!--
To manage our codebase, it is necessary to learn some tools. This may take some time for beginners, but will benefit the rest life. **All the following instructions assume that the reader is familiar and comfortable with linux command line.**
 -->
为了管理我们的代码库，有必要学习一些工具。这对于初学者来说可能需要一些时间，但将有益于余生。 **以下所有说明均假设读者熟悉 Linux 命令行。**

<!--
### Workflow
 -->
### 工作流程

<!--
Steps to contribute your codes to this repository:
1. `git clone` and `git pull` the latest codes
1. Create your own branch `git checkout -b`. Write codes and test.
1. `git commit` your changes with clean commit message
1. Push your branch to github with `git push origin your_branch`.
1. Open a pull request to merge your branch
1. Get your PR reviewed and approved
 -->
将代码贡献到此存储库的步骤：
1. `git clone` 并 `git pull` 最新代码
1. 创建自己的分支 `git checkout -b`。编写代码并测试。
1. `git commit` 使用完整的提交消息进行更改
1. 使用 `git push origin your_branch` 将您的分支推送到 github。
1. 打开拉取请求来合并您的分支
1. 审核并批准您的 PR

<!--
### Style
 -->
### 风格

<!--
- **Code style.** We basically follow the [PEP8 standard](https://www.python.org/dev/peps/pep-0008/). Please also refer to the [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html). Please pay special attention to **indentations, spaces, linebreaks, name style, comments and docstrings**.
- **Doc style.** Please refer to [Google Python Style Docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).
- **Commit message.** Please refer to [Git Commit Message Conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#) for good examples of commit message. You may also use tools like [cz-cli](https://github.com/commitizen/cz-cli).
 -->
- **代码风格。** 我们基本上遵循 [PEP8标准](https://www.python.org/dev/peps/pep-0008/)。另请参阅 [Google Python 风格指南](https://google.github.io/styleguide/pyguide.html)。请特别注意**缩进、空格、换行、名称样式、注释和文档字符串**。
- **文档风格。** 请参阅 [Google Python 风格文档字符串](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)。
- **提交消息。** 请参阅 [Git 提交消息约定](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#) 了解提交消息的良好示例。您还可以使用 [cz-cli](https://github.com/commitizen/cz-cli) 等工具。

<!--
### Tools and Codes
 -->
### 工具和代码

<!--
#### VSCode
 -->
#### VSCode

<!--
[VSCode](https://code.visualstudio.com/) is the recommended IDE for coding. It is extremely powerful with the following plugins:
- remote ssh: link to remote server
- debug python codes by simply adding breakpoints with mouse click
- autoformat your code to pep8 standard
- nested jupyter notebook
- markdown editing and preview
- and so on...
 -->
[VSCode](https://code.visualstudio.com/) 是推荐的编码 IDE。它非常强大，具有以下插件：
- 远程 ssh：链接到远程服务器
- 只需单击鼠标添加断点即可调试 Python 代码
- 将您的代码自动格式化为 pep8 标准
- 嵌套的 jupyter 笔记本
- Markdown 编辑和预览
- 等等...

#### Github

<!--
Please always use git to track your codes. Refer to the [Pro Git book](https://git-scm.com/book/en/v2) for comprehensive understanding of git. You may also get a quick start with the [git cheatsheet](https://jan-krueger.net/wordpress/wp-content/uploads/2007/09/git-cheat-sheet.pdf). Also, the chinese [Git教程](https://www.liaoxuefeng.com/wiki/896043488029600) is also available. Some suggestions:
- Write clean commit message when you push to this repository.
- If conflict happens when you push your code, you can pull down the repository first with `git pull origin main` and fix the merge.
 -->
请始终使用 git 来跟踪您的代码。对 git 的全面了解请参考 [Pro Git book](https://git-scm.com/book/en/v2)。您还可以使用 [git cheatsheet](https://jan-krueger.net/wordpress/wp-content/uploads/2007/09/git-cheat-sheet.pdf) 快速开始。另外，中文的 [Git教程](https://www.liaoxuefeng.com/wiki/896043488029600) 也可用。一些建议：
- 当您推送到此存储库时写入完整的提交消息。
- 如果推送代码时发生冲突，您可以先使用 `git pull origin main` 拉取存储库并修复合并。

#### Anaconda

<!--
Please manage your local coding dependencies with [anaconda](https://www.anaconda.com/).
 -->
请使用 [Anaconda](https://www.anaconda.com/) 管理您的本地编码依赖项。

